***************************************************************** Python ************************************************************
Approach 1:

class Solution:
    def countBadPairs(self, nums: List[int]) -> int:
        n = len(nums)
        count = 0

        for i in range(n):
            for j in range(i + 1, n):
                if j - i != nums[j] - nums[i]:
                    count += 1
        return count

Approach 2:
class Solution:
    def countBadPairs(self, nums: List[int]) -> int:
        n = len(nums)
        result = 0
        
        for i in range(n):
            nums[i] = nums[i] - i

        count_map = defaultdict(int)
        count_map[nums[0]] = 1

        for j in range(1, n):
            count_of_numsj = count_map.get(nums[j], 0)
            total_nums_beforej = j
            bad_pair = total_nums_beforej - count_of_numsj
            result += bad_pair

            count_map[nums[j]] += 1

        return result


Approach 3:

class Solution:
    def countBadPairs(self, nums: List[int]) -> int:
        n = len(nums)
        result = 0

        count_map = defaultdict(int)

        for i in range(n):
            diff = nums[i] - i
            total_pairs_till_index = i
            good_pairs = count_map[diff]

            result += (total_pairs_till_index - good_pairs) 

            count_map[diff] += 1

        return result 
