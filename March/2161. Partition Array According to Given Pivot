************************************************************************* Python ************************************************************************
Approach 1: 3 list

class Solution:
    def pivotArray(self, nums: List[int], pivot: int) -> List[int]:
        
        less_than_pivot = []
        equal_to_pivot = []
        greate_than_pivot = []

        for num in nums:
            if num < pivot:
                less_than_pivot.append(num)
            elif num == pivot:
                equal_to_pivot.append(num)
            else:
                greate_than_pivot.append(num)

        return less_than_pivot + equal_to_pivot + greate_than_pivot


Approach 2: count of less and equal

class Solution:
    def pivotArray(self, nums: List[int], pivot: int) -> List[int]:
        
        n = len(nums)

        less_count = sum(1 for num in nums if num < pivot)
        equal_count = sum(1 for num in nums if num == pivot)

        i, j, k = 0, less_count, less_count + equal_count

        result = [0] * n

        for num in nums:
            if num < pivot:
                result[i] = num
                i += 1
            elif num == pivot:
                result[j] = num
                j += 1
            else:
                result[k] = num
                k += 1

        return result


Approach 3: two pointer

class Solution:
    def pivotArray(self, nums: List[int], pivot: int) -> List[int]:
        
        n = len(nums)

        result = [0] * n

        i, j = 0, n - 1
        i_, j_ = 0, n - 1

        while i < n and j >= 0:
            if nums[i] < pivot:
                result[i_] = nums[i]
                i_ += 1
            if nums[j] > pivot:
                result[j_] = nums[j]
                j_ -= 1
            
            i += 1
            j -= 1

        while i_ <= j_:
            result[i_] = pivot
            i_ += 1

        return result

