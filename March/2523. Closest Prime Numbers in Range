******************************************************************************* Python ***************************************************************************
Approach 1:

class Solution:
    def isPrime(self, num: int)-> bool:
        if num <= 1:
            return False

        for div in range(2, int(num**0.5) + 1):
            if num % div == 0:
                return False
        return True

    def closestPrimes(self, left: int, right: int) -> List[int]:

        primes = []

        for num in range(left, right + 1):
            if self.isPrime(num):
                if primes and num - primes[-1] <= 2:
                    return[primes[-1], num]
                primes.append(num)

        if len(primes) < 2:
            return [-1, -1]

        mindiff = float('inf')
        result = [-1, -1]

        for i in range(1, len(primes)):
            diff = primes[i] - primes[i - 1]
            if diff < mindiff:
                mindiff = diff
                result = [primes[i - 1], primes[i]]

        return result
        

Approach 2:


class Solution:
    def sieveHelper(self, right: int)-> List[bool]:
        isPrime = [True] * (right + 1)
        isPrime[0] = isPrime[1] = False

        for i in range(2, int(right**0.5) + 1):
            if isPrime[i]:
                for j in range(i * i, right + 1, i):
                    isPrime[j] = False

        return isPrime

    def closestPrimes(self, left: int, right: int) -> List[int]:

        isPrime = self.sieveHelper(right)

        primes = [num for num in range(left, right + 1) if isPrime[num]]

        if len(primes) < 2:
            return [-1, -1]

        minDiff = float('inf')
        result = [-1, -1]

        for i in range(1, len(primes)):
            diff = primes[i] - primes[i -1]
            if diff < minDiff:
                minDiff = diff
                result = [primes[i - 1], primes[i]]

        return result

