*************************************************************************** Python **********************************************************************
Approach 1: map + sorting

class Solution:
    def mergeArrays(self, nums1: List[List[int]], nums2: List[List[int]]) -> List[List[int]]:
        freq = defaultdict(int)

        for key, val in nums1:
            freq[key] += val

        for key, val in nums2:
            freq[key] += val


        return sorted([[key, val] for key, val in freq.items()])

Approach 2: map  Sorted map

class Solution:
    def mergeArrays(self, nums1: List[List[int]], nums2: List[List[int]]) -> List[List[int]]:
        freq = SortedDict()

        for key, val in nums1:
            freq[key] = freq.get(key, 0) + val

        for key, val in nums2:
            freq[key] = freq.get(key, 0) + val

        return [[key, val] for key, val in freq.items()]
        
  Approach 3: two pointer 

class Solution:
    def mergeArrays(self, nums1: List[List[int]], nums2: List[List[int]]) -> List[List[int]]:
        i, j = 0, 0
        m, n = len(nums1), len(nums2)
        result = []


        while i < m and j < n:
            if nums1[i][0] < nums2[j][0]:
                result.append(nums1[i])
                i += 1
            elif nums1[i][0] > nums2[j][0]:
                result.append(nums2[j])
                j += 1
            else:
                result.append([nums1[i][0], nums1[i][1] + nums2[j][1]])
                i += 1
                j += 1

        while i < m:
            result.append(nums1[i])
            i +=1

        while j < n:
            result.append(nums2[j])
            j += 1

        return result

      
